package com.fanfan.robot.local.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fanfan.robot.local.model.LocalBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_BEAN".
*/
public class LocalBeanDao extends AbstractDao<LocalBean, Long> {

    public static final String TABLENAME = "LOCAL_BEAN";

    /**
     * Properties of entity LocalBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SaveTime = new Property(1, long.class, "saveTime", false, "saveTime");
        public final static Property ShowTitle = new Property(2, String.class, "showTitle", false, "showTitle");
        public final static Property ShowDetail = new Property(3, String.class, "showDetail", false, "showDetail");
        public final static Property Lat = new Property(4, double.class, "lat", false, "lat");
        public final static Property Lng = new Property(5, double.class, "lng", false, "lng");
        public final static Property Telephone = new Property(6, String.class, "telephone", false, "telephone");
        public final static Property Type = new Property(7, int.class, "type", false, "type");
        public final static Property Business = new Property(8, String.class, "business", false, "business");
    }


    public LocalBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"saveTime\" INTEGER NOT NULL ," + // 1: saveTime
                "\"showTitle\" TEXT," + // 2: showTitle
                "\"showDetail\" TEXT," + // 3: showDetail
                "\"lat\" REAL NOT NULL ," + // 4: lat
                "\"lng\" REAL NOT NULL ," + // 5: lng
                "\"telephone\" TEXT," + // 6: telephone
                "\"type\" INTEGER NOT NULL ," + // 7: type
                "\"business\" TEXT);"); // 8: business
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSaveTime());
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(3, showTitle);
        }
 
        String showDetail = entity.getShowDetail();
        if (showDetail != null) {
            stmt.bindString(4, showDetail);
        }
        stmt.bindDouble(5, entity.getLat());
        stmt.bindDouble(6, entity.getLng());
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
        stmt.bindLong(8, entity.getType());
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(9, business);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSaveTime());
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(3, showTitle);
        }
 
        String showDetail = entity.getShowDetail();
        if (showDetail != null) {
            stmt.bindString(4, showDetail);
        }
        stmt.bindDouble(5, entity.getLat());
        stmt.bindDouble(6, entity.getLng());
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
        stmt.bindLong(8, entity.getType());
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(9, business);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalBean readEntity(Cursor cursor, int offset) {
        LocalBean entity = new LocalBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // saveTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // showTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // showDetail
            cursor.getDouble(offset + 4), // lat
            cursor.getDouble(offset + 5), // lng
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telephone
            cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // business
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaveTime(cursor.getLong(offset + 1));
        entity.setShowTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShowDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.getDouble(offset + 4));
        entity.setLng(cursor.getDouble(offset + 5));
        entity.setTelephone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setBusiness(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
